version: '3.8'

services:
  # MongoDB for product and cart services
  mongodb:
    image: mongo:latest
    container_name: mongodb
    restart: always
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: password
      MONGO_INITDB_DATABASE: ecommerce
    volumes:
      - mongodb_data:/data/db
      - ./scripts/mongodb-init.js:/docker-entrypoint-initdb.d/mongodb-init.js:ro

  # PostgreSQL for order and payment services
  postgres:
    image: postgres:latest
    container_name: postgres
    restart: always
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: ecommerce
    volumes:
      - postgres_data:/var/lib/postgresql/data

  # Zookeeper for Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    restart: always
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data

  # Kafka for messaging
  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    restart: always
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    volumes:
      - kafka_data:/var/lib/kafka/data
    depends_on:
      - zookeeper

  # Kafka UI for management
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    restart: always
    ports:
      - "8090:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    depends_on:
      - kafka

  # Auth Service
  auth-service:
    build:
      context: .
      dockerfile: ./services/auth/Dockerfile
    container_name: auth-service
    restart: always
    ports:
      - "8081:8081"
      - "9091:9091"
    environment:
      - ENVIRONMENT=development
      - LOG_LEVEL=debug
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=password
      - DB_NAME=ecommerce
      - KAFKA_BROKERS=kafka:9092
      - KAFKA_GROUP_ID=auth-group
      - SERVICE_PORT=8081
      - GRPC_PORT=9091
      - JWT_SECRET=your_jwt_secret_key
    depends_on:
      - postgres
      - kafka

  # Product Service
  product-service:
    build:
      context: .
      dockerfile: ./services/product/Dockerfile
    container_name: product-service
    restart: always
    ports:
      - "8082:8082"
      - "9092:9092"
    environment:
      - ENVIRONMENT=development
      - LOG_LEVEL=debug
      - MONGO_URI=mongodb://root:password@mongodb:27017
      - MONGO_DB=ecommerce
      - KAFKA_BROKERS=kafka:9092
      - KAFKA_GROUP_ID=product-group
      - SERVICE_PORT=8082
      - GRPC_PORT=9092
    depends_on:
      - mongodb
      - kafka

  # Order Service
  order-service:
    build:
      context: .
      dockerfile: ./services/order/Dockerfile
    container_name: order-service
    restart: always
    ports:
      - "8083:8083"
      - "9093:9093"
    environment:
      - ENVIRONMENT=development
      - LOG_LEVEL=debug
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=password
      - DB_NAME=ecommerce
      - KAFKA_BROKERS=kafka:9092
      - KAFKA_GROUP_ID=order-group
      - SERVICE_PORT=8083
      - GRPC_PORT=9093
    depends_on:
      - postgres
      - kafka

  # Cart Service
  cart-service:
    build:
      context: .
      dockerfile: ./services/cart/Dockerfile
    container_name: cart-service
    restart: always
    ports:
      - "8084:8084"
      - "9094:9094"
    environment:
      - ENVIRONMENT=development
      - LOG_LEVEL=debug
      - MONGO_URI=mongodb://root:password@mongodb:27017
      - MONGO_DB=ecommerce
      - KAFKA_BROKERS=kafka:9092
      - KAFKA_GROUP_ID=cart-group
      - SERVICE_PORT=8084
      - GRPC_PORT=9094
    depends_on:
      - mongodb
      - kafka

  # Payment Service
  payment-service:
    build:
      context: .
      dockerfile: ./services/payment/Dockerfile
    container_name: payment-service
    restart: always
    ports:
      - "8085:8085"
      - "9095:9095"
    environment:
      - ENVIRONMENT=development
      - LOG_LEVEL=debug
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=password
      - DB_NAME=ecommerce
      - KAFKA_BROKERS=kafka:9092
      - KAFKA_GROUP_ID=payment-group
      - SERVICE_PORT=8085
      - GRPC_PORT=9095
    depends_on:
      - postgres
      - kafka

  # Frontend Service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: frontend
    restart: always
    ports:
      - "3000:3000"
    depends_on:
      - auth-service
      - product-service
      - order-service
      - cart-service
      - payment-service

volumes:
  mongodb_data:
  postgres_data:
  zookeeper_data:
  kafka_data:
